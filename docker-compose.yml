version: '3.8'

services:
  # AgentOps API Backend
  api:
    build:
      context: ./app
      dockerfile: api/Dockerfile
    container_name: agentops-api
    ports:
      - "8000:8000"
    environment:
      # Supabase Configuration
      SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}

      # Application URLs
      APP_URL: ${APP_URL:-http://localhost:3000}
      PROTOCOL: ${PROTOCOL:-http}
      API_DOMAIN: ${API_DOMAIN:-localhost:8000}
      APP_DOMAIN: ${APP_DOMAIN:-localhost:3000}

      # Supabase PostgreSQL Connection
      SUPABASE_HOST: ${SUPABASE_HOST}
      SUPABASE_PORT: ${SUPABASE_PORT:-5432}
      SUPABASE_DATABASE: ${SUPABASE_DATABASE:-postgres}
      SUPABASE_USER: ${SUPABASE_USER}
      SUPABASE_PASSWORD: ${SUPABASE_PASSWORD}
      SUPABASE_MAX_POOL_SIZE: ${SUPABASE_MAX_POOL_SIZE:-10}
      SUPABASE_SSLMODE: ${SUPABASE_SSLMODE:-require}

      # Authentication
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}

      # ClickHouse Configuration
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
      CLICKHOUSE_PORT: ${CLICKHOUSE_PORT:-8443}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DATABASE:-otel_2}
      CLICKHOUSE_SECURE: ${CLICKHOUSE_SECURE:-true}
      CLICKHOUSE_ENDPOINT: ${CLICKHOUSE_ENDPOINT}
      CLICKHOUSE_USERNAME: ${CLICKHOUSE_USERNAME:-default}

      # S3 Storage (Optional)
      SUPABASE_S3_BUCKET: ${SUPABASE_S3_BUCKET}
      SUPABASE_S3_LOGS_BUCKET: ${SUPABASE_S3_LOGS_BUCKET}
      SUPABASE_S3_ACCESS_KEY_ID: ${SUPABASE_S3_ACCESS_KEY_ID}
      SUPABASE_S3_SECRET_ACCESS_KEY: ${SUPABASE_S3_SECRET_ACCESS_KEY}

      # Monitoring (Optional)
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-development}
      LOGGING_LEVEL: ${LOGGING_LEVEL:-INFO}
    volumes:
      - ./app/api:/app/api
    networks:
      - agentops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AgentOps Dashboard (Next.js)
  dashboard:
    build:
      context: ./app/dashboard
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    container_name: agentops-dashboard
    ports:
      - "3000:3000"
    environment:
      # Supabase Configuration
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_PROJECT_ID: ${SUPABASE_PROJECT_ID}

      # Application URLs
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_URL: ${APP_URL:-http://localhost:3000}
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}

      # Application Configuration
      NEXT_PUBLIC_ENVIRONMENT_TYPE: ${NEXT_PUBLIC_ENVIRONMENT_TYPE:-development}
      NEXT_PUBLIC_PLAYGROUND: ${NEXT_PUBLIC_PLAYGROUND:-true}
      NEXT_PUBLIC_SIGNIN_METHODS: ${NEXT_PUBLIC_SIGNIN_METHODS}
      NEXT_PUBLIC_FALLBACK_API_KEY: ${NEXT_PUBLIC_FALLBACK_API_KEY}

      # Analytics and Monitoring (Optional)
      NEXT_PUBLIC_POSTHOG_KEY: ${NEXT_PUBLIC_POSTHOG_KEY}
      NEXT_PUBLIC_POSTHOG_HOST: ${NEXT_PUBLIC_POSTHOG_HOST}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
      NEXT_PUBLIC_SENTRY_ORG: ${NEXT_PUBLIC_SENTRY_ORG}
      NEXT_PUBLIC_SENTRY_PROJECT: ${NEXT_PUBLIC_SENTRY_PROJECT}
      NEXT_PUBLIC_SENTRY_ENVIRONMENT: ${NEXT_PUBLIC_SENTRY_ENVIRONMENT}

      # Stripe Configuration (Optional)
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${NEXT_STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${NEXT_STRIPE_WEBHOOK_SECRET}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - agentops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # OpenTelemetry Collector (Optional - for local tracing)
  otelcollector:
    build:
      context: ./app/opentelemetry-collector
      dockerfile: Dockerfile
    container_name: agentops-otel-collector
    ports:
      - "4318:4318"  # OTLP HTTP receiver
      - "4317:4317"  # OTLP gRPC receiver
    environment:
      CLICKHOUSE_ENDPOINT: ${CLICKHOUSE_ENDPOINT}
      CLICKHOUSE_USERNAME: ${CLICKHOUSE_USERNAME:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DATABASE: ${CLICKHOUSE_DATABASE:-otel_2}
    volumes:
      - ./app/opentelemetry-collector/config.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - agentops-network
    restart: unless-stopped
    profiles:
      - with-otel

  # Local ClickHouse (Optional - for fully local development)
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: agentops-clickhouse
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native interface
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE:-otel_2}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./app/clickhouse/migrations:/docker-entrypoint-initdb.d
    networks:
      - agentops-network
    restart: unless-stopped
    profiles:
      - with-clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (Optional - for rate limiting and caching)
  redis:
    image: redis:7-alpine
    container_name: agentops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agentops-network
    restart: unless-stopped
    profiles:
      - with-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  agentops-network:
    driver: bridge

volumes:
  clickhouse-data:
  redis-data:

